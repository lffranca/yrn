name: Go Tests & Docker Build

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

permissions:
  contents: write
  packages: write

jobs:
  test:
    name: Run Go Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23

      - name: Create Test Workspace
        run: |
          mkdir -p /home/runner/test_workspace
          cp -r . /home/runner/test_workspace/

      - name: Run Tests
        working-directory: /home/runner/test_workspace
        run: |
          go mod tidy
          go test ./... -v

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'  # SÃ³ roda se for um push na branch 'main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Generate Version
        id: vars
        run: |
          # Fetch all tags to get accurate latest
          git fetch --tags

          # Get latest tag or default to v0.0.0
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")

          # Extract version numbers
          VERSION_REGEX="v([0-9]+)\.([0-9]+)\.([0-9]+)"
          if [[ $LATEST_TAG =~ $VERSION_REGEX ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
          else
            MAJOR=0
            MINOR=0
            PATCH=0
          fi

          # Auto-increment patch version for CI builds
          PATCH=$((PATCH + 1))
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"

          # Ensure we don't create duplicate tags by checking if it exists
          COUNTER=0
          ORIGINAL_PATCH=$PATCH
          while git rev-parse "$NEW_VERSION" >/dev/null 2>&1; do
            COUNTER=$((COUNTER + 1))
            PATCH=$((ORIGINAL_PATCH + COUNTER))
            NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
            echo "Tag $NEW_VERSION already exists, trying next: v${MAJOR}.${MINOR}.${PATCH}"
          done

          # Also get commit hash for fallback
          COMMIT_HASH=$(git rev-parse --short=5 HEAD)

          echo "version=$NEW_VERSION" >> $GITHUB_ENV
          echo "version_number=${MAJOR}.${MINOR}.${PATCH}" >> $GITHUB_ENV
          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_ENV

          echo "Generated unique version: $NEW_VERSION (commit: $COMMIT_HASH)"

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Build Docker Image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}
          docker build -t $IMAGE_NAME:${{ env.version }} -t $IMAGE_NAME:latest .

      - name: Push Docker Image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}
          docker push $IMAGE_NAME:${{ env.version }}
          docker push $IMAGE_NAME:latest

      - name: Update Rollout Image Tag
        run: |
          sed -i "s|image: ghcr.io/lffranca/yrn:.*|image: ghcr.io/lffranca/yrn:${{ env.version }}|" infra/apps/api/deployment.yaml

      - name: Create Git Tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          echo "Creating git tag: ${{ env.version }}"
          git tag ${{ env.version }}
          git push origin ${{ env.version }}

      - name: Update Kubernetes Deployment
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add infra/apps/api/deployment.yaml
          git commit -m "chore: update rollout image to ${{ env.version }}"
          git push

      - name: Build Release Binaries
        run: |
          mkdir -p dist
          # Build binaries for multiple platforms
          GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=${{ env.version }}" -o dist/yrn-agent-linux-amd64 ./cmd/agent
          GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=${{ env.version }}" -o dist/yrn-connector-linux-amd64 ./cmd/connector
          GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=${{ env.version }}" -o dist/yrn-api-linux-amd64 ./cmd/api

          GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version=${{ env.version }}" -o dist/yrn-agent-darwin-amd64 ./cmd/agent
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version=${{ env.version }}" -o dist/yrn-connector-darwin-amd64 ./cmd/connector
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version=${{ env.version }}" -o dist/yrn-api-darwin-amd64 ./cmd/api

          GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version=${{ env.version }}" -o dist/yrn-agent-windows-amd64.exe ./cmd/agent
          GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version=${{ env.version }}" -o dist/yrn-connector-windows-amd64.exe ./cmd/connector
          GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version=${{ env.version }}" -o dist/yrn-api-windows-amd64.exe ./cmd/api

      - name: Create Release Archives
        run: |
          cd dist
          tar -czf yrn-${{ env.version }}-linux-amd64.tar.gz yrn-*-linux-amd64
          tar -czf yrn-${{ env.version }}-darwin-amd64.tar.gz yrn-*-darwin-amd64
          zip yrn-${{ env.version }}-windows-amd64.zip yrn-*-windows-amd64.exe

      - name: Generate Changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD | grep -v "chore: update rollout image" || true)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" HEAD | grep -v "chore: update rollout image" || true)
          fi

          # If no commits after filtering, provide a default message
          if [ -z "$COMMITS" ]; then
            COMMITS="- Initial release"
          fi

          cat > CHANGELOG.md << EOF
          ## What's Changed
          $COMMITS

          ## ðŸš€ Installation
          ### Docker
          \`\`\`bash
          docker pull ghcr.io/${{ github.repository }}:${{ env.version }}
          \`\`\`

          ### Binary Download
          Download the appropriate binary for your platform from the release assets.

          **Docker Image**: \`ghcr.io/${{ github.repository }}:${{ env.version }}\`
          EOF

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.version }}
          release_name: YRN ${{ env.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(env.version, '-') }}

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Upload Linux
          gh release upload ${{ env.version }} ./dist/yrn-${{ env.version }}-linux-amd64.tar.gz
          # Upload macOS
          gh release upload ${{ env.version }} ./dist/yrn-${{ env.version }}-darwin-amd64.tar.gz
          # Upload Windows
          gh release upload ${{ env.version }} ./dist/yrn-${{ env.version }}-windows-amd64.zip
