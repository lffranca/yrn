name: Auto Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers when CI creates version tags

permissions:
  contents: write
  packages: write

jobs:
  auto-release:
    name: Create Automatic Release
    runs-on: ubuntu-latest
    # Only run if tag was created by github-actions (from CI)
    if: contains(github.event.head_commit.author.name, 'github-actions')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23

      - name: Get Version from Tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Verify Docker Image Exists
        run: |
          # Check if the Docker image was already built by CI
          docker manifest inspect ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }} || {
            echo "Docker image not found. CI might not have completed yet."
            exit 1
          }

      - name: Build Binaries
        run: |
          mkdir -p dist

          # Build for multiple platforms
          GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/yrn-agent-linux-amd64 ./cmd/agent
          GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/yrn-connector-linux-amd64 ./cmd/connector
          GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/yrn-api-linux-amd64 ./cmd/api

          GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/yrn-agent-darwin-amd64 ./cmd/agent
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/yrn-connector-darwin-amd64 ./cmd/connector
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/yrn-api-darwin-amd64 ./cmd/api

          GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/yrn-agent-windows-amd64.exe ./cmd/agent
          GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/yrn-connector-windows-amd64.exe ./cmd/connector
          GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/yrn-api-windows-amd64.exe ./cmd/api

      - name: Create Archives
        run: |
          cd dist

          # Create Linux archive
          tar -czf yrn-${{ steps.version.outputs.version }}-linux-amd64.tar.gz yrn-*-linux-amd64

          # Create macOS archive
          tar -czf yrn-${{ steps.version.outputs.version }}-darwin-amd64.tar.gz yrn-*-darwin-amd64

          # Create Windows archive
          zip yrn-${{ steps.version.outputs.version }}-windows-amd64.zip yrn-*-windows-amd64.exe

      - name: Generate Changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD | grep -v "chore: update rollout image")
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" HEAD | grep -v "chore: update rollout image")
          fi

          # Create changelog
          cat > CHANGELOG.md << EOF
          ## What's Changed

          $COMMITS

          ## ðŸš€ Installation

          ### Docker
          \`\`\`bash
          docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
          \`\`\`

          ### Binary Download
          Download the appropriate binary for your platform from the release assets below.

          ### Quick Start
          \`\`\`bash
          # Extract the archive
          tar -xzf yrn-${{ steps.version.outputs.version }}-linux-amd64.tar.gz

          # Run the services
          ./yrn-agent-linux-amd64 &
          ./yrn-connector-linux-amd64 &
          ./yrn-api-linux-amd64 &
          \`\`\`

          **Docker Image**: \`ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}\`

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...${{ steps.version.outputs.version }}
          EOF

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: YRN ${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}

      - name: Upload Linux Archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/yrn-${{ steps.version.outputs.version }}-linux-amd64.tar.gz
          asset_name: yrn-${{ steps.version.outputs.version }}-linux-amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload macOS Archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/yrn-${{ steps.version.outputs.version }}-darwin-amd64.tar.gz
          asset_name: yrn-${{ steps.version.outputs.version }}-darwin-amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows Archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/yrn-${{ steps.version.outputs.version }}-windows-amd64.zip
          asset_name: yrn-${{ steps.version.outputs.version }}-windows-amd64.zip
          asset_content_type: application/zip