name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v2.1.3
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog generation

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23

      - name: Get Version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Build Binaries
        run: |
          mkdir -p dist

          # Build for multiple platforms
          GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/yrn-agent-linux-amd64 ./cmd/agent
          GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/yrn-connector-linux-amd64 ./cmd/connector
          GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/yrn-api-linux-amd64 ./cmd/api

          GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/yrn-agent-darwin-amd64 ./cmd/agent
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/yrn-connector-darwin-amd64 ./cmd/connector
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/yrn-api-darwin-amd64 ./cmd/api

          GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/yrn-agent-windows-amd64.exe ./cmd/agent
          GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/yrn-connector-windows-amd64.exe ./cmd/connector
          GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/yrn-api-windows-amd64.exe ./cmd/api

      - name: Create Archives
        run: |
          cd dist

          # Create Linux archive
          tar -czf yrn-${{ steps.version.outputs.version }}-linux-amd64.tar.gz yrn-*-linux-amd64

          # Create macOS archive
          tar -czf yrn-${{ steps.version.outputs.version }}-darwin-amd64.tar.gz yrn-*-darwin-amd64

          # Create Windows archive
          zip yrn-${{ steps.version.outputs.version }}-windows-amd64.zip yrn-*-windows-amd64.exe

      - name: Generate Changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" HEAD)
          fi

          # Create changelog
          cat > CHANGELOG.md << 'EOF'
          ## What's Changed

          $COMMITS

          ## ðŸš€ Installation

          ### Docker
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
          ```

          ### Binary Download
          Download the appropriate binary for your platform from the release assets below.

          ### Quick Start
          ```bash
          # Extract the archive
          tar -xzf yrn-${{ steps.version.outputs.version }}-linux-amd64.tar.gz

          # Run the services
          ./yrn-agent-linux-amd64 &
          ./yrn-connector-linux-amd64 &
          ./yrn-api-linux-amd64 &
          ```

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...${{ steps.version.outputs.version }}
          EOF

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Build and Push Docker Images
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}

          # Build image with version tag
          docker build -t $IMAGE_NAME:${{ steps.version.outputs.version }} .
          docker build -t $IMAGE_NAME:latest .

          # Push both tags
          docker push $IMAGE_NAME:${{ steps.version.outputs.version }}
          docker push $IMAGE_NAME:latest

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: YRN ${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}

      - name: Upload Linux Archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/yrn-${{ steps.version.outputs.version }}-linux-amd64.tar.gz
          asset_name: yrn-${{ steps.version.outputs.version }}-linux-amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload macOS Archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/yrn-${{ steps.version.outputs.version }}-darwin-amd64.tar.gz
          asset_name: yrn-${{ steps.version.outputs.version }}-darwin-amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows Archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/yrn-${{ steps.version.outputs.version }}-windows-amd64.zip
          asset_name: yrn-${{ steps.version.outputs.version }}-windows-amd64.zip
          asset_content_type: application/zip

  update-deployment:
    name: Update Kubernetes Deployment
    runs-on: ubuntu-latest
    needs: release
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Version from Tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update Deployment Image
        run: |
          sed -i "s|image: ghcr.io/${{ github.repository }}:.*|image: ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}|" infra/apps/api/deployment.yaml

      - name: Commit Updated Deployment
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add infra/apps/api/deployment.yaml
          git commit -m "chore: update deployment to ${{ steps.version.outputs.version }}" || echo "No changes to commit"
          git push origin main || echo "No changes to push"